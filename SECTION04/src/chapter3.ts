// 함수 타입의 호환성 : 다른 함수 타입으로 괜찮은지 판단하는 것
// 1. 두 함수의 반환값 타입이 호환되는가?
// 2. 두 함수의 매개변수의 타입이 호환되는가?
// 1-1: A 반환값 타입이 B 반환값 타입의 슈퍼타입이라면 두 타입은 호환된다.
// 2-1: 매개변수의 개수가 같을 때: C 매개변수의 타입이 D 매개변수 타입의 서브 타입일 때 호환
// 2-2: 매개변수의 개수가 다를 때: 마찬가지 임둥,,,


// 함수 오버로딩
// 하나의 함수를 매개변수의 개수나 타입에 따라 다르게 동작하도록 만드는 문법
// 여러가지 버전으로 만드는 문법
// -> 하나의 함수 func
// -> 일단 모든 매개변수는 넘버타입
// ver1. 매개변수가 1개일 때에는 매개변수에 20일 곱한 값을 출력
// ver2. 매개변수가 3개일 때에는 모든 매개변수를 더한 값을 출력


// 버전들 -> 오버로드 시그니쳐
function func(a: number): void;
function func(a: number, b: number, c: number): void;

// 실제 구현부 -> 구현 시그니쳐
function func(a: number, b?: number, c?: number) {
  if(typeof b === 'number' && typeof c === 'number') {
    console.log(a + b + c);
  } else {
    console.log(a * 20);
  }
}


func(1)
func(1,2,3)


// 구현 시그니쳐 매개변수 타입은 모든 오버로드 시그니쳐와 호환되도록 만들어야 한다.